# Author: Leandro de Mattos Pereira
# Please cite the author when using this code.

# Clear all objects from the environment
rm(list=ls())

# Load required libraries
library(GEOquery)
library(frma)
library(affy)
library(cluster)
library(impute)
library(preprocessCore)
library(WGCNA)
library(simpleaffy)
library(RColorBrewer)
library(ggfortify)
library(ggplot2)
library(sva)
library(limma)
library(hgu133plus2.db)

# Set working directory
setwd("/home/mattoslmp/datasets_arrays/SampleNetworkFiles")

# Read CEL files and sample description
celfiles <- read.affy(covdesc="phenodata.txt", path="/home/mattoslmp/datasets_arrays/data")

# Plot initial boxplot and histogram
cols <- brewer.pal(8, "Set1")
boxplot(celfiles, col=cols, main="Boxplot before normalization")
hist(celfiles, col=cols, main="Histogram before normalization")

##########################
# Normalization using FRMA
celfiles.frma <- frma(celfiles, background="rma", normalize="quantile", summarize="robust_weighted_average", target="probeset")

# Plot after normalization
hist(celfiles.frma, col=cols, main="Histogram after normalization")
boxplot(celfiles.frma, col=cols, main="Boxplot after normalization")

# Extract normalized data
edata <- exprs(celfiles.frma)
pheno <- pData(celfiles.frma)
colnames(pheno) <- c("sample", "FileName", "Target", "Batch")
sample <- pheno$sample
batch <- pheno$Batch
condition <- as.factor(pheno$Target)
pdata <- data.frame(sample, batch, condition)
modmatrix <- model.matrix(~as.factor(condition), data=pdata)

##########################
# Remove batch effects using ComBat
celfiles.frma.combat <- ComBat(dat=edata, batch=batch, mod=modmatrix, par.prior=TRUE, prior.plots=TRUE)

# Diagnostic: clustering after batch effect removal
distance <- dist(t(celfiles.frma.combat), method="euclidean")
clusters <- hclust(distance)
plot(clusters, main="Clustering after batch effect removal")

# Final plots
hist(celfiles.frma.combat, col=cols, main="Histogram after batch effect removal")
boxplot(celfiles.frma.combat, col=cols, main="Boxplot after batch effect removal")

##########################
# Prepare for differential expression analysis
samples <- celfiles.frma.combateset$Target
samples <- as.factor(samples)

# Create experimental design
design <- model.matrix(~0 + samples)
colnames(design) <- levels(samples)

# Fit linear model using Limma
fit <- lmFit(exprs(celfiles.frma.combateset), design)
fit <- eBayes(fit)

# Contrast analysis
contrast.matrix <- makeContrasts(samplesA172_Glioblastoma - samplesSW480_Colon, levels=design)
fit.contrast <- contrasts.fit(fit, contrast.matrix)
fit.contrast <- eBayes(fit.contrast)

# Generate list of differentially expressed genes
top_genes <- topTable(fit.contrast, coef=1, number=40000, lfc=2.0, p.value=0.01, adjust.method="fdr")

# Save results
write.table(top_genes, "top_genes.txt", sep="\t", quote=FALSE)

##########################
# WGCNA: Co-expression network analysis

# Set working directory for WGCNA
setwd("/home/mattoslmp/datasets_arrays/SampleNetworkFiles")

# Load processed data from ComBat
data <- celfiles.frma.combat
datExpr0 <- t(data)  # Transpose to put genes in columns and samples in rows

# Select optimal power for network construction
powers <- c(1:10, seq(from=12, to=20, by=2))
sft <- pickSoftThreshold(datExpr0, powerVector=powers, verbose=5)

# Plot results of power selection
par(mfrow=c(1,2))
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3]) * sft$fitIndices[,2],
     xlab="Soft Threshold (power)", ylab="Scale Free Topology Model Fit, signed R^2", type="n",
     main="Scale Independence")
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3]) * sft$fitIndices[,2],
     labels=powers, cex=0.9, col="red")
abline(h=0.90, col="red")

# Plot mean connectivity
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)", ylab="Mean Connectivity", type="n",
     main="Mean Connectivity")
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=0.9, col="red")

# Build WGCNA network using the selected power
power <- sft$powerEstimate
net <- blockwiseModules(datExpr0, power=power, TOMType="unsigned", minModuleSize=30, reassignThreshold=0, mergeCutHeight=0.25, numericLabels=TRUE, pamRespectsDendro=FALSE, verbose=3)

# Display identified modules
table(net$colors)

# Plot gene dendrogram and module colors
plotDendroAndColors(net$dendrograms[[1]], net$colors, "Dynamic Tree Cut",
                    dendroLabels=FALSE, hang=0.03,
                    addGuide=TRUE, guideHang=0.05, main="Gene Dendrogram and Module Colors")

# Extract modules and calculate correlation with experimental conditions
moduleEigengenes <- net$MEs
MEs <- moduleEigengenes(datExpr0, net$colors)
correlations <- cor(MEs, condition, use="p")

# Plot correlations between modules and condition
library(pheatmap)
pheatmap(correlations, cluster_rows=TRUE, cluster_cols=TRUE, display_numbers=TRUE, main="Module-Condition Correlation")

# Save WGCNA results
save(MEs, file="moduleEigengenes.RData")
save(net, file="network.RData")
